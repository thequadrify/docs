{
  "openapi": "3.0.0",
  "info": {
    "title": "Quadrify API",
    "version": "1.0.0",
    "description": "API to manage your Quadrify Project."
  },
  "servers": [
    {
      "url": "https://staging.quadrify.io/api/v1"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/sales": {
      "post": {
        "summary": "Creates a new sale entry for a specific provider.",
        "description": "This endpoint is used to register a new sale through an external provider.",
        "operationId": "createSale",
        "tags": [
          "Sales"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Sale"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Sale created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SaleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters."
          },
          "401": {
            "description": "Authorization information is missing or invalid."
          },
          "403": {
            "description": "Authorization token is invalid."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      },
      "get": {
        "summary": "List sales entries.",
        "description": "This endpoint is used to list sales entries with pagination support.",
        "operationId": "listSales",
        "tags": [
          "Sales"
        ],
        "parameters": [
          {
            "name": "take",
            "in": "query",
            "description": "Number of sales to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of sales to skip before starting to collect the result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of sales.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Sale"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters."
          },
          "401": {
            "description": "Authorization information is missing or invalid."
          },
          "403": {
            "description": "Authorization token is invalid."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/contacts": {
      "get": {
        "summary": "List contacts",
        "description": "This endpoint is used to list contacts with pagination support.",
        "operationId": "listContacts",
        "tags": [
          "Contacts"
        ],
        "parameters": [
          {
            "name": "take",
            "in": "query",
            "description": "Number of contacts to return.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of contacts to skip before starting to collect the result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of contacts.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Contact"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters."
          },
          "401": {
            "description": "Authorization information is missing or invalid."
          },
          "403": {
            "description": "Authorization token is invalid."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/products": {
      "get": {
        "summary": "List Products",
        "description": "Retrieves a list of products, with support for pagination.",
        "parameters": [
          {
            "name": "take",
            "in": "query",
            "description": "Number of products to take.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Number of products to skip before starting to collect the result set.",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of products.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request parameters."
          },
          "401": {
            "description": "Authorization information is missing or invalid."
          },
          "403": {
            "description": "Authorization token is invalid."
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "Sale": {
        "type": "object",
        "properties": {
          "providerId": {
            "type": "string",
            "description": "Unique identifier of the provider."
          },
          "providerType": {
            "type": "string",
            "description": "Type of the provider."
          },
          "providerFee": {
            "type": "number",
            "description": "Fee charged by the provider."
          },
          "status": {
            "type": "string",
            "enum": [
              "APPROVED",
              "CHARGEBACK",
              "REFUNDED",
              "REFUND_REQUESTED",
              "WAITING_PAYMENT",
              "PROCESSING",
              "REFUSED"
            ],
            "description": "Current status of the sale."
          },
          "paymentMethod": {
            "type": "string",
            "enum": [
              "CREDIT_CARD",
              "PIX",
              "BOLETO",
              "TRANSFER"
            ],
            "description": "Method of payment used."
          },
          "paymentInstallments": {
            "type": "number",
            "default": 1,
            "description": "Number of payment installments."
          },
          "amount": {
            "type": "number",
            "description": "Total amount of the sale."
          },
          "product": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "price": {
                "type": "number",
                "nullable": true
              }
            },
            "required": [
              "id",
              "name"
            ]
          },
          "customer": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "phone": {
                "type": "string",
                "nullable": true
              }
            },
            "required": [
              "id",
              "name",
              "email"
            ]
          },
          "approvedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp when the sale was approved."
          },
          "refundedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp when the sale was refunded."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Timestamp when the sale was created."
          }
        }
      },
      "Contact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the contact."
          },
          "name": {
            "type": "string",
            "description": "Name of the contact."
          },
          "email": {
            "type": "string",
            "description": "Email address of the contact."
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "description": "Phone number of the contact, if available."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the contact was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the contact was last updated."
          }
        },
        "required": [
          "id",
          "name",
          "email"
        ]
      },
      "Product": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the product."
          },
          "providerType": {
            "type": "string",
            "description": "Type of the provider."
          },
          "providerId": {
            "type": "string",
            "description": "Identifier of the provider."
          },
          "name": {
            "type": "string",
            "description": "Name of the product."
          },
          "description": {
            "type": "string",
            "nullable": true,
            "description": "Description of the product."
          },
          "price": {
            "type": "number",
            "format": "float",
            "nullable": true,
            "description": "Price of the product."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the product was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the product was last updated."
          }
        },
        "required": [
          "id",
          "providerType",
          "providerId",
          "name"
        ]
      },
      "AdCampaign": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the campaign."
          },
          "name": {
            "type": "string",
            "description": "Name of the campaign."
          },
          "status": {
            "type": "string",
            "description": "Current status of the campaign."
          },
          "providerType": {
            "type": "string",
            "description": "Type of the provider."
          },
          "providerId": {
            "type": "string",
            "description": "Identifier of the provider."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the campaign was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the campaign was last updated."
          },
          "spend": {
            "type": "number",
            "description": "Total spend on the campaign."
          },
          "cpm": {
            "type": "number",
            "description": "Cost per thousand impressions."
          },
          "clicks": {
            "type": "number",
            "description": "Total number of clicks."
          },
          "impressions": {
            "type": "number",
            "description": "Total number of impressions."
          },
          "ctr": {
            "type": "number",
            "description": "Click-through rate."
          },
          "pageViews": {
            "type": "number",
            "description": "Total number of page views."
          },
          "checkout": {
            "type": "number",
            "description": "Total number of checkouts."
          },
          "sales": {
            "type": "number",
            "description": "Total number of sales."
          },
          "connectRate": {
            "type": "number",
            "description": "Connection rate."
          },
          "offerMagnetism": {
            "type": "number",
            "description": "Offer magnetism."
          },
          "costPerClick": {
            "type": "number",
            "description": "Cost per click."
          },
          "costPerCheckout": {
            "type": "number",
            "description": "Cost per checkout."
          },
          "costPerConversion": {
            "type": "number",
            "description": "Cost per conversion."
          }
        },
        "required": [
          "id",
          "name",
          "status",
          "providerType",
          "providerId",
          "createdAt",
          "updatedAt"
        ]
      },
      "SaleStatus": {
        "type": "string",
        "enum": [
          "APPROVED",
          "CHARGEBACK",
          "REFUNDED",
          "REFUND_REQUESTED",
          "WAITING_PAYMENT",
          "PROCESSING",
          "REFUSED"
        ],
        "description": "Defines the status of a sale."
      },
      "SalePaymentMethod": {
        "type": "string",
        "enum": [
          "CREDIT_CARD",
          "PIX",
          "BOLETO",
          "TRANSFER"
        ],
        "description": "Defines the payment methods available for a sale."
      },
      "SaleResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the sale record."
          },
          "providerId": {
            "type": "string",
            "description": "Unique identifier of the provider."
          },
          "providerType": {
            "type": "string",
            "description": "Type of the provider."
          },
          "providerFee": {
            "type": "number",
            "description": "Fee charged by the provider."
          },
          "status": {
            "$ref": "#/components/schemas/SaleStatus",
            "description": "Current status of the sale."
          },
          "paymentMethod": {
            "$ref": "#/components/schemas/SalePaymentMethod",
            "description": "Method of payment used."
          },
          "paymentInstallments": {
            "type": "number",
            "description": "Number of payment installments."
          },
          "amount": {
            "type": "number",
            "description": "Total amount of the sale."
          },
          "product": {
            "$ref": "#/components/schemas/Product",
            "description": "Product details associated with the sale."
          },
          "customer": {
            "$ref": "#/components/schemas/Contact",
            "description": "Customer details associated with the sale."
          },
          "approvedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the sale was approved."
          },
          "refundedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the sale was refunded."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Date and time when the sale record was created."
          }
        },
        "required": [
          "id",
          "providerId",
          "providerType",
          "providerFee",
          "status",
          "paymentMethod",
          "paymentInstallments",
          "amount"
        ]
      }
    }
  }
}
